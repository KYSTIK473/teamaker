import asyncio
import typing

import requests
from aiogram import Bot, Dispatcher, types

from tea import Tea
from tea_profiles import tp
from config import token

bot = Bot(token=token)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
dp = Dispatcher(bot)
teas = []  # type: typing.List[Tea]

is_choosing = False
is_choosing_sugar_amount = False
is_choosing_tea = False
is_choosing_temperature = False
is_final = False
is_choosing_strength = False
is_choosing_tea_profiles = False
tea_amount = 0
sugar_amount = 0
temperature = 0
strength = 0
# ip_tea = '192.168.1.41'
# ip_tea = '192.168.170.195'

#ip_tea = '192.168.18.79'
ip_tea = '192.169.3.82'


def make_Standart():
    is_choosing = False
    is_choosing_sugar_amount = False
    is_choosing_tea = False
    is_choosing_temperature = False
    is_final = False
    is_choosing_strength = False
    is_choosing_tea_profiles = False
    tea_amount = 0
    sugar_amount = 0
    temperature = 0
    strength = 0


@dp.message_handler(lambda message: message.text == '/start' or message.text == '–î–∞')
async def cmd_start(message: types.Message):
    global is_choosing, is_choosing_tea, is_choosing_temperature, is_choosing_sugar_amount, is_final
    kb = [
        [
            types.KeyboardButton(text="–ó–∞–≤–∞—Ä–∏—Ç—å —á–∞–π")],
        [types.KeyboardButton(text="–ì–æ—Ç–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã")],
        [types.KeyboardButton(text="–ß—Ç–æ-—Ç–æ –µ—â–µ (Coming soon)")
         ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-—Ç–æ"
    )
    is_choosing_sugar_amount = False
    is_choosing_tea = False
    is_choosing_tea_profiles = False
    is_choosing_temperature = False
    is_final = False
    is_choosing = True

    if message.text == '/start':
        await message.answer(f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å {message.from_user.first_name}, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)
    else:
        await message.answer(f"{message.from_user.first_name}, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)


@dp.message_handler(lambda message: is_choosing)
async def choosing(message: types.Message):
    global is_choosing, is_choosing_tea, is_choosing_tea_profiles
    if message.text == '–ó–∞–≤–∞—Ä–∏—Ç—å —á–∞–π':
        is_choosing = False
        await message.answer('–°–∫–æ–ª—å–∫–æ –º–ª –≤–æ–¥—ã –≤ —á–∞–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ (   –Ω–µ –±–æ–ª–µ–µ 300 –º–ª)?',
                             reply_markup=types.ReplyKeyboardRemove())
        is_choosing_tea = True
    elif message.text == '–ì–æ—Ç–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã':
        is_choosing = False
        kb = [
            [
                types.KeyboardButton(text="–ß—ë—Ä–Ω—ã–π —á–∞–π")],
            [types.KeyboardButton(text="–ó–µ–ª—ë–Ω—ã–π —á–∞–π")],
            [types.KeyboardButton(text="–ß—Ç–æ-—Ç–æ –µ—â–µ (Coming soon)")
             ],
        ]
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-—Ç–æ"
        )
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç',
                             reply_markup=keyboard)
        is_choosing_tea_profiles = True
    elif message.text == '–ß—Ç–æ-—Ç–æ –µ—â–µ (Coming soon)':
        await message.answer('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞')
        await message.answer(f"{message.from_user.first_name}, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?")
    else:
        await message.answer('–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç')
        await message.answer(f"{message.from_user.first_name}, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?")


@dp.message_handler(lambda message: message.text and is_choosing_tea_profiles)
async def profile_tea(message: types.Message):
    global is_choosing_sugar_amount, is_choosing_tea, tea_amount
    if message.text == '–ß—ë—Ä–Ω—ã–π —á–∞–π':
        res = tp['black']
        tea_amount = res[0]
        sugar_amount = res[1]
        temperature = res[2]
        strength = res[3]
        request = f"a={strength}&b={sugar_amount}&c={temperature}&d={tea_amount}"
        await message.answer('–ß—ë—Ä–Ω—ã–π —á–∞–π —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è',
                             reply_markup=types.ReplyKeyboardRemove())
        print(request)
        print(requests.get(f'http://{ip_tea}/on?{request}'))
        make_Standart()
    elif message.text == '–ó–µ–ª—ë–Ω—ã–π —á–∞–π':
        res = tp['green']
        tea_amount = res[0]
        sugar_amount = res[1]
        temperature = res[2]
        strength = res[3]
        request = f"a={strength}&b={sugar_amount}&c={temperature}&d={tea_amount}"
        await message.answer('–ó–µ–ª—ë–Ω—ã–π —á–∞–π —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è',
                             reply_markup=types.ReplyKeyboardRemove())
        print(request)
        #http://192.168.1.60/on?a=2&b=2&c=40&d=180
        print(requests.get(f'http://{ip_tea}/on?{request}'))
        make_Standart()
    else:
        make_Standart()
        await message.answer('–¢–∞–∫–æ–≥–æ —á–∞—è –Ω–µ—Ç',
                             reply_markup=types.ReplyKeyboardRemove())
    is_choosing = False
    is_choosing_sugar_amount = False
    is_choosing_tea = False
    is_choosing_temperature = False
    is_final = False
    is_choosing_strength = False
    is_choosing_tea_profiles = False
    tea_amount = 0
    sugar_amount = 0
    temperature = 0


@dp.message_handler(lambda message: message.text and is_choosing_tea)
async def choosing_sugar_amount(message: types.Message):
    global is_choosing_sugar_amount, is_choosing_tea, tea_amount
    if message.text.isnumeric() and 0 <= int(message.text) <= 300:
        tea_amount = int(message.text)
        await message.answer('–°–∫–æ–ª—å–∫–æ —á–∞–π–Ω—ã—Ö –ª–æ–∂–µ–∫ —Å–∞—Ö–∞—Ä–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ (–Ω–µ –±–æ–ª–µ–µ 10)?')
        is_choosing_sugar_amount = True
        is_choosing_tea = False
    else:
        await message.answer('–°—Ç–æ–ª—å–∫–æ —á–∞—è –Ω–µ –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è :(')
        await message.answer('–°–∫–æ–ª—å–∫–æ –º–ª –≤–æ–¥—ã –≤ —á–∞–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ (–Ω–µ –±–æ–ª–µ–µ 300 –º–ª)?')


@dp.message_handler(lambda message: message.text and is_choosing_sugar_amount)
async def choosing_sugar(message: types.Message):
    global is_choosing_sugar_amount, sugar_amount, is_choosing_temperature, is_choosing_strength
    if message.text.isnumeric() and 0 <= int(message.text) <= 10:
        sugar_amount = int(message.text)
        is_choosing_sugar_amount = False
        is_choosing_strength = True
        await message.answer('–ö–∞–∫–æ–π –∫—Ä–µ–ø–æ—Å—Ç–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —á–∞–π (–Ω–µ –±–æ–ª–µ–µ 4)?')
    else:
        await message.answer('–°—Ç–æ–ª—å–∫–æ —á–∞–π–Ω—ã—Ö –ª–æ–∂–µ–∫ —Å–∞—Ö–∞—Ä–∞ –Ω–∞—Å—ã–ø–∞—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è :(')
        await message.answer('–°–∫–æ–ª—å–∫–æ —á–∞–π–Ω—ã—Ö –ª–æ–∂–µ–∫ —Å–∞—Ö–∞—Ä–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ (–Ω–µ –±–æ–ª–µ–µ 10)?')


@dp.message_handler(lambda message: message.text and is_choosing_strength)
async def is_choosing_strength(message: types.Message):
    global is_choosing_temperature, is_choosing_strength, strength
    if message.text.isnumeric() and 1 <= int(message.text) <= 4:
        strength = int(message.text)
        is_choosing_strength = False
        is_choosing_temperature = True
        await message.answer('–ö–∞–∫—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —á–∞—è –≤—ã —Ö–æ—Ç–∏—Ç–µ (–Ω–µ –≤—ã—à–µ 96 C)?')
    else:
        await message.answer('–¢–∞–∫–æ–π –∫—Ä–µ–ø–æ—Å—Ç–∏ —á–∞—è –∑–∞–≤–∞—Ä–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è :(')
        await message.answer('–ö–∞–∫–æ–π –∫—Ä–µ–ø–æ—Å—Ç–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —á–∞–π (–Ω–µ –±–æ–ª–µ–µ 4)?  ')


@dp.message_handler(lambda message: message.text and is_choosing_temperature)
async def choosing_temp(message: types.Message):
    global is_choosing_temperature, temperature, is_final, sugar_amount, tea_amount
    if message.text.isnumeric() and 0 <= int(message.text) <= 96:
        temperature = int(message.text)
        is_final = True
        is_choosing_temperature = False
        kb = [
            [types.KeyboardButton(text="–ó–∞–≤–∞—Ä–∏—Ç—å —á–∞–π!")],
            [types.KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å")]
        ]
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-—Ç–æ"
        )
        await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏: \n'
                             f'‚òïÔ∏è –û–±—ä–µ–º –≤–æ–¥—ã –≤ —á–∞–µ: {tea_amount} –º–ª\n'
                             f'üç∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞—Ö–∞—Ä–∞: {sugar_amount} —á.–ª.\n'
                             f'‚òïÔ∏è –ö—Ä–µ–ø–æ—Å—Ç—å —á–∞—è: {strength} –ø–æ—Ä—Ü–∏–π\n'
                             f'‚ô®Ô∏è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature} –°', reply_markup=keyboard)
    else:
        await message.answer('–¢–∞–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —á–∞–π –∑–∞–≤–∞—Ä–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è :(')
        await message.answer('–ö–∞–∫—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —á–∞—è –≤—ã —Ö–æ—Ç–∏—Ç–µ (–Ω–µ –≤—ã—à–µ 96 –°)?')


@dp.message_handler(lambda message: message.text and is_final)
async def final(message: types.Message):
    global temperature, is_final, sugar_amount, tea_amount, ip_tea, strength
    if message.text == '–ó–∞–≤–∞—Ä–∏—Ç—å —á–∞–π!' or message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        is_final = False
        if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
            await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–≤–∞—Ä–∫—É —á–∞—è', reply_markup=types.ReplyKeyboardRemove())

        else:
            await message.answer('–í–∞—à —á–∞–π –∑–∞–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è! ', reply_markup=types.ReplyKeyboardRemove())
            request = f"a={strength}&b={sugar_amount}&c={temperature}&d={tea_amount}"
            print(requests.get(f'http://{ip_tea}/on?{request}'))
        await cmd_start(message)
    else:
        await message.answer('–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç—É, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–Ω–∏–∑—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ')


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    a = asyncio.get_event_loop()
    a.run_until_complete(main())
